#!/bin/bash

dependency_check() {
  which make >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    pm install -yqq make
  fi

  which gcc >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    pm install -yqq gcc
  fi

  which g++ >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    if [ "$(os::is_centos)" = "true" ]; then
      pm install -yy gcc-c++
    elif [ "$(os::is_ubuntu)" = "true" ]; then
      pm install -yy g++
    fi
  fi
}

config_rc() {
  #  [[ -f "$HOME/.zshrc" ]] &&
  #   XSHRC="$HOME/.zshrc" ||
  #   XSHRC="$HOME/.bashrc"
  local XSHRC=$1

  # if not found, ignore
  if [ ! -f $XSHRC ]; then
    return
  fi

  cat $XSHRC | grep NVM_DIR >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    cat <<EOF >>$XSHRC
# NVM
export NVM_DIR="\$HOME/.nvm"
[ -s "\$NVM_DIR/nvm.sh" ] && \. "\$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "\$NVM_DIR/bash_completion" ] && \. "\$NVM_DIR/bash_completion"  # This loads nvm bash_completion
EOF
  fi
}

config_profile() {
  config_rc $HOME/.bashrc
  config_rc $HOME/.zshrc
}

# load_nvm() {
#   log::info "Load NVM ..."
#   if [ -s "$NVM_DIR/nvm.sh" ]; then
#     . "$NVM_DIR/nvm.sh" # This loads nvm
#     # log::info "Load NVM ok..."
#   fi
# }

install_nvm() {
  config_rc $HOME/.bashrc
  config_rc $HOME/.zshrc

  if [ -d "$PACKAGE_NODEJS_NVM_DIR" ]; then
    local NVM_DIR=$PACKAGE_NODEJS_NVM_DIR
    log::info "Load NVM ..."
    . "$NVM_DIR/nvm.sh" # This loads nvm
    return
  fi

  log::info "Install NVM ..."

  if [ "$(net::is_google_visitable)" = "false" ]; then
    export NVM_SOURCE=https://gitee.com/whatwewant/nvm
    curl -o- https://gitee.com/whatwewant/nvm/raw/master/install.sh | bash
  else
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
  fi

  log::info "Load NVM ..."
  . "$PACKAGE_NODEJS_NVM_DIR/nvm.sh" # This loads nvm
}

install_nodejs() {
  local version=$version

  if [ "$(net::is_google_visitable)" = "false" ]; then
    export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/dist
    export NPM_CONFIG_REGISTRY=https://registry.npm.taobao.org
  fi

  # if not set version
  if [ -z "$version" ]; then
    which node >> /dev/null 2>&1
    if [ "$?" = "0" ]; then
      local current_version=$(node -v)
      if [ -n "$version" ] && [ "$version" != "$current_version" ]; then
        log::warn "Load Node.js(current: ${current_version}, want: ${version}) ..."
      else
        log::info "Load Node.js(version: ${current_version}) ..."
      fi

      return
    fi

    # no nodejs found, use default version
    version=$PACKAGE_NODEJS_DEFAILT_VERSION
  else
    which node >> /dev/null 2>&1
    if [ "$?" = "0" ]; then
      local current_version=$(node -v)
      echo $current_version | grep $version >> /dev/null 2>&1
      if [ "$?" = "0" ]; then
        log::info "Load Node.js(version: ${current_version}) ..."
        return
      fi
    fi
  fi

  log::info "Installing Node $version ..."
  nvm install $version

  log::info "Use Node $version"
  nvm alias default $version
  nvm use $version
}

install_packages() {
  # Depdendency Check
  dependency_check

  log::info "Install Packages ..."

  install_one() {
    local name=${@:2}
    log::info "  [pacakges: $name] checking ..."

    npm list -g $name >> /dev/null 2>&1
    if [ "$?" = "0" ]; then
      log::info "  [pacakges: $name] installed"
      return
    fi

    log::info "  [pacakges: $name] installing ..."
    npm i -g $name
    if [ "$?" != "0" ]; then
      log::error "  [pacakges: $name] install error"
      return
    fi

    log::success "  [pacakges: $name] install done"
  }

  # bash shell cannot export array as env
  #   stackoverflow: https://unix.stackexchange.com/questions/393091/unable-to-use-an-array-as-environment-variable
  config::load_file $PACKAGES_PATH/nodejs/config

  # echo "PACKAGE_NODEJS_DEFAULT_PACKAGES: ${PACKAGE_NODEJS_DEFAULT_PACKAGES[@]}"

  array::each install_one ${PACKAGE_NODEJS_DEFAULT_PACKAGES[@]} 
}

update_packages() {
  # Depdendency Check
  dependency_check

  log::info "Install Packages ..."

  install_one() {
    local name=${@:2}

    log::info "  [update_packages][pacakges: $name] installing ..."
    npm i -g $name
    if [ "$?" != "0" ]; then
      log::error "  [update_packages][pacakges: $name] install error"
      return
    fi

    log::success "  [update_packages][pacakges: $name] install done"
  }

  # bash shell cannot export array as env
  #   stackoverflow: https://unix.stackexchange.com/questions/393091/unable-to-use-an-array-as-environment-variable
  config::load_file $PACKAGES_PATH/nodejs/config

  # echo "PACKAGE_NODEJS_DEFAULT_PACKAGES: ${PACKAGE_NODEJS_DEFAULT_PACKAGES[@]}"

  array::each install_one ${PACKAGE_NODEJS_DEFAULT_PACKAGES[@]} 
}

export -f config_rc
export -f dependency_check

export -f config_profile
export -f install_nvm
export -f install_nodejs

export -f install_packages
export -f update_packages